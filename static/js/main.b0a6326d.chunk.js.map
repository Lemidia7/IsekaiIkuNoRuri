{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Option","Select","set","obj","path","value","tmp","_ldSet","merge","STORY","BGM","columns","key","title","dataIndex","render","react_default","a","createElement","es_switch","checked","Boolean","Editor","handleBgmChange","_this","props","onChange","userData","handleResetStory","ended","concat","_this2","this","story","get","Fragment","card","es_select","style","width","map","table","dataSource","onRow","_ref","onClick","event","React","Component","App","state","userDate","isSaving","savedUserData","handleChange","_this3","setState","loadUserData","_callee","regenerator_default","wrap","_context","prev","next","axios","sent","data","stop","saveUserData","_callee2","_context2","post","t0","message","error","decodeURIComponent","_this$state","isLoading","layout","className","padding","background","minHeight","es_button","loading","type","disabled","App_Editor","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAIQA,EAAYC,IAAZD,QACAE,EAAWC,IAAXD,OAER,SAASE,EAAIC,EAAKC,EAAMC,GACtB,IAAMC,EAAMC,cAAO,GAAIH,EAAMC,GAC7B,OAAOG,gBAAM,GAAIL,EAAKG,GAGxB,IAAMG,EAAQ,CACZ,uBACA,wBACA,kBACA,kBACA,kBACA,kBACA,oBACA,uBACA,kBACA,kBACA,kBACA,sBACA,kBACA,kBACA,kBACA,qBACA,yBACA,mBACA,kBACA,kBACA,kBACA,oBACA,kBACA,qBACA,kBACA,kBACA,kBACA,kBACA,oBACA,sBACA,kBACA,kBACA,wBACA,kBACA,kBACA,kBACA,yBACA,2BACA,oBACA,kBACA,kBACA,kBACA,uBACA,kBACA,kBACA,kBACA,kBACA,yBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,2BACA,2BACA,0BACA,2BACA,2BACA,yBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,wBACA,wBACA,wBACA,wBACA,8BACA,yBAGIC,EAAM,CACV,UACA,aACA,aACA,YACA,gBACA,iBACA,6BACA,qBACA,qBACA,qBACA,oBACA,mBACA,oBACA,sBACA,kBACA,oBACA,oBACA,oBACA,uBACA,uBACA,qBACA,2BACA,2BACA,qBACA,mBACA,kBACA,uBACA,iBACA,YACA,6BACA,8BACA,wBACA,wBACA,wBACA,wBACA,wBACA,iCACA,cACA,uBACA,sBACA,kBACA,gBACA,gBACA,mBACA,kBACA,mBACA,aACA,aACA,yBACA,0BACA,cAGIC,EAAU,CACd,CACEC,IAAK,QACLC,MAAO,QACPC,UAAW,OAEb,CACEF,IAAK,QACLC,MAAO,QACPC,UAAW,QACXC,OAAQ,SAAAV,GAAK,OAAIW,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAASC,QAAQhB,QAIxCiB,6MACJC,gBAAkB,SAAAlB,G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","file":"static/js/main.b0a6326d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { get, set as _ldSet, merge } from \"lodash\";\r\nimport { Layout, Button, Select, Card, Switch, Table, message } from \"antd\";\r\nconst { Content } = Layout;\r\nconst { Option } = Select;\r\n\r\nfunction set(obj, path, value) {\r\n  const tmp = _ldSet({}, path, value);\r\n  return merge({}, obj, tmp);\r\n}\r\n\r\nconst STORY = [\r\n  \"LobbyT_EquipWork_End\",\r\n  \"WarpT_BattleChars_End\",\r\n  \"M0_T001_S01_End\",\r\n  \"M0_T002_S01_End\",\r\n  \"M0_T003_S02_End\",\r\n  \"M0_T004_S01_End\",\r\n  \"LobbyT_ToWarp_End\",\r\n  \"WarpT_WarpSystem_End\",\r\n  \"M0_T004_S03_End\",\r\n  \"M1_T001_S01_End\",\r\n  \"M1_T002_S01_End\",\r\n  \"LobbyT_CoreLink_End\",\r\n  \"M1_T002_S02_End\",\r\n  \"M1_T002_S03_End\",\r\n  \"M1_T002_S04_End\",\r\n  \"LobbyT_Mission_End\",\r\n  \"LobbyT_ChangeEquip_End\",\r\n  \"LobbyT_Gacha_End\",\r\n  \"M1_T003_S01_End\",\r\n  \"M1_T003_S02_End\",\r\n  \"M1_T003_S03_End\",\r\n  \"WarpT_Chapter_End\",\r\n  \"M1_T004_S01_End\",\r\n  \"LobbyT_Cooking_End\",\r\n  \"M1_T005_S01_End\",\r\n  \"M1_T005_S02_End\",\r\n  \"M1_T005_S03_End\",\r\n  \"LobbyT_Gift_End\",\r\n  \"LobbyT_Talent_End\",\r\n  \"LobbyT_CharRoom_End\",\r\n  \"M1_T006_S03_End\",\r\n  \"M1_T006_S04_End\",\r\n  \"LobbyT_Expedition_End\",\r\n  \"M1_T007_S02_End\",\r\n  \"M1_T007_S03_End\",\r\n  \"M1_T007_S04_End\",\r\n  \"LobbyT_Exploration_End\",\r\n  \"LobbyT_ExpeditionMap_End\",\r\n  \"LobbyT_Recipe_End\",\r\n  \"M1_T008_S01_End\",\r\n  \"M1_T008_S02_End\",\r\n  \"M1_T008_S03_End\",\r\n  \"LobbyT_TalentMap_End\",\r\n  \"M1_T009_S01_End\",\r\n  \"M1_T009_S02_End\",\r\n  \"M1_T009_S03_End\",\r\n  \"M2_T001_S01_End\",\r\n  \"WarpT_SpecialStage_End\",\r\n  \"M2_T001_S02_End\",\r\n  \"M2_T001_S03_End\",\r\n  \"M2_T001_S04_End\",\r\n  \"M2_T002_S01_End\",\r\n  \"M2_T002_S02_End\",\r\n  \"M2_T002_S03_End\",\r\n  \"M2_T002_S04_End\",\r\n  \"M2_T002_S05_End\",\r\n  \"M2_T002_S06_End\",\r\n  \"Event_BeachTrip_T001_End\",\r\n  \"Event_BeachTrip_T002_End\",\r\n  \"LobbyT_CharRoom_Eat_End\",\r\n  \"Event_BeachTrip_T003_End\",\r\n  \"Event_BeachTrip_T004_End\",\r\n  \"LobbyT_EquipEvolve_End\",\r\n  \"M2_T003_S01_End\",\r\n  \"M2_T003_S02_End\",\r\n  \"M2_T003_S03_End\",\r\n  \"M2_T003_S04_End\",\r\n  \"M2_T004_S01_End\",\r\n  \"M2_T004_S02_End\",\r\n  \"M2_T004_S03_End\",\r\n  \"M2_T004_S04_End\",\r\n  \"M2_T004_S05_End\",\r\n  \"M2_T005_S01_End\",\r\n  \"M2_T005_S02_End\",\r\n  \"M3_UpdateNotice_End\",\r\n  \"M2_Side1_T001_S01_End\",\r\n  \"M2_Side1_T001_S03_End\",\r\n  \"M2_Side1_T001_S04_End\",\r\n  \"M2_Side1_T002_S01_End\",\r\n  \"M2_Side1_T003_S01_End\",\r\n  \"M2_Side1_T003_S02_End\",\r\n  \"M2_Side1_T004_S02_End\",\r\n  \"M2_Side1_T004_S03_End\",\r\n  \"M2_Side1_T005_S01_End\",\r\n  \"LobbyT_TalentSingle_End\",\r\n  \"LobbyT_TalentDouble_End\",\r\n  \"M2_Side2_T001_S01_End\",\r\n  \"M2_Side2_T002_S01_End\",\r\n  \"M2_Side2_T003_S01_End\",\r\n  \"M2_Side2_T004_S01_End\",\r\n  \"Event_ChristmasEnd_T001_End\",\r\n  \"M2_Side2_T005_S01_End\"\r\n];\r\n\r\nconst BGM = [\r\n  \"BGM_Win\",\r\n  \"BGM_Warp02\",\r\n  \"BGM_Warp01\",\r\n  \"BGM_Title\",\r\n  \"BGM_RoyalCity\",\r\n  \"BGM_NonoFailed\",\r\n  \"BGM_Mood_UnknownWorld2Harp\",\r\n  \"BGM_Mood_Suspense5\",\r\n  \"BGM_Mood_Suspense3\",\r\n  \"BGM_Mood_Suspense2\",\r\n  \"BGM_Mood_Suspense\",\r\n  \"BGM_Mood_Scary03\",\r\n  \"BGM_Mood_Sakuya02\",\r\n  \"BGM_Mood_Refreshing\",\r\n  \"BGM_Mood_NoWay2\",\r\n  \"BGM_Mood_Memory03\",\r\n  \"BGM_Mood_Memory02\",\r\n  \"BGM_Mood_Memory01\",\r\n  \"BGM_Mood_Melancholy2\",\r\n  \"BGM_Mood_LostPlace04\",\r\n  \"BGM_Mood_LetsParty\",\r\n  \"BGM_Mood_Investigation02\",\r\n  \"BGM_Mood_Investigation01\",\r\n  \"BGM_Mood_Holiday01\",\r\n  \"BGM_Mood_Guild01\",\r\n  \"BGM_Mood_Fear01\",\r\n  \"BGM_Mood_Deep_Woods2\",\r\n  \"BGM_Mood_Beach\",\r\n  \"BGM_Gacha\",\r\n  \"BGM_Field_WorldTree02_Loop\",\r\n  \"BGM_Field_WorldTree02_Intro\",\r\n  \"BGM_Field_WorldTree01\",\r\n  \"BGM_Field_SnowFactory\",\r\n  \"BGM_Field_FinalWave02\",\r\n  \"BGM_Field_FinalWave01\",\r\n  \"BGM_Field_ElfGarden01\",\r\n  \"BGM_Event_NightKingdomAnchient\",\r\n  \"BGM_Cooking\",\r\n  \"BGM_City_Geisterwald\",\r\n  \"BGM_City_ElfVillage\",\r\n  \"BGM_Char_Yurika\",\r\n  \"BGM_Char_Ruri\",\r\n  \"BGM_Char_Miyu\",\r\n  \"BGM_Char_Kuroeru\",\r\n  \"BGM_Boss03_Loop\",\r\n  \"BGM_Boss03_Intro\",\r\n  \"BGM_Boss02\",\r\n  \"BGM_Boss01\",\r\n  \"BGM_Battle_Rush01_Loop\",\r\n  \"BGM_Battle_Rush01_Intro\",\r\n  \"BGM_Base01\"\r\n];\r\n\r\nconst columns = [\r\n  {\r\n    key: \"label\",\r\n    title: \"Story\",\r\n    dataIndex: \"key\"\r\n  },\r\n  {\r\n    key: \"ended\",\r\n    title: \"Ended\",\r\n    dataIndex: \"ended\",\r\n    render: value => <Switch checked={Boolean(value)} />\r\n  }\r\n];\r\n\r\nclass Editor extends React.Component {\r\n  handleBgmChange = value => {\r\n    this.props.onChange(\r\n      set(this.props.userData, \"userData.story.strs.BGM_Base_Loop\", value)\r\n    );\r\n  };\r\n  handleResetStory = (key, ended) => {\r\n    this.props.onChange(\r\n      set(this.props.userData, `userData.story.vars.${key}`, ended)\r\n    );\r\n  };\r\n  render() {\r\n    const {\r\n      userData: { userData }\r\n    } = this.props;\r\n    const story = get(userData, \"story.vars\");\r\n\r\n    return (\r\n      <>\r\n        <Card title=\"BGM\">\r\n          <Select\r\n            value={get(userData, \"story.strs.BGM_Base_Loop\")}\r\n            style={{ width: \"100%\" }}\r\n            onChange={this.handleBgmChange}\r\n          >\r\n            {BGM.map(key => (\r\n              <Option key={key} value={key}>\r\n                {key}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Card>\r\n        <Card title=\"Story\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={STORY.map(key => ({ key, ended: story[key] }))}\r\n            onRow={({ key, ended }) => ({\r\n              onClick: event => this.handleResetStory(key, ended ^ 1)\r\n            })}\r\n          />\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    userDate: null,\r\n    isSaving: false,\r\n    savedUserData: null\r\n  };\r\n  handleChange = userData => {\r\n    this.setState({ userData });\r\n  };\r\n  loadUserData = async () => {\r\n    const userData = (await axios.get(\"/IsekaiIkuNoRuri/userData\")).data;\r\n    this.setState({ userData, savedUserData: userData });\r\n  };\r\n  saveUserData = async () => {\r\n    try {\r\n      const { userData } = this.state;\r\n      this.setState({ isSaving: true });\r\n      await axios.post(\"/IsekaiIkuNoRuri/userData\", userData);\r\n      this.setState({ isSaving: false, savedUserData: userData });\r\n    } catch (e) {\r\n      message.error(\r\n        decodeURIComponent(\r\n          \"%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF%E7%82%B8%E4%BA%86%EF%BC%8C%E6%88%91%E5%8F%AA%E7%9F%A5%E9%81%93%E8%BF%99%E4%B9%88%E5%A4%9A%E3%80%82\"\r\n        )\r\n      );\r\n      this.setState({ isSaving: false });\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.loadUserData();\r\n  }\r\n  render() {\r\n    const { userData, savedUserData, isLoading } = this.state;\r\n    return (\r\n      <Layout className=\"layout\">\r\n        <Content style={{ padding: \"0 0px\" }}>\r\n          <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\r\n            {userData ? (\r\n              <>\r\n                <Button\r\n                  loading={isLoading}\r\n                  type=\"primary\"\r\n                  style={{ width: \"100%\" }}\r\n                  onClick={this.saveUserData}\r\n                  disabled={userData === savedUserData}\r\n                >\r\n                  Save\r\n                </Button>\r\n                <Editor userData={userData} onChange={this.handleChange} />\r\n                <Button\r\n                  loading={isLoading}\r\n                  type=\"primary\"\r\n                  style={{ width: \"100%\" }}\r\n                  onClick={this.saveUserData}\r\n                  disabled={userData === savedUserData}\r\n                >\r\n                  Save\r\n                </Button>{\" \"}\r\n              </>\r\n            ) : (\r\n              <div>Loading...</div>\r\n            )}\r\n          </div>\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}